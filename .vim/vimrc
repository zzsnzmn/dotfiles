set nocompatible               " be iMproved

source $HOME/.vim/settings/base.vim

" Set tabs by filetype
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2

colorscheme gotham

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Use Vundle to manage vundle (yo dawg)
Plugin 'gmarik/Vundle.vim'

" -----------------------------------------------------------------------------
" MISC
" -----------------------------------------------------------------------------
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-sensible'
Plugin 'L9'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

" -----------------------------------------------------------------------------
" Programming Utils
" -----------------------------------------------------------------------------

" Syntastic
" =============================================================================
Plugin 'scrooloose/syntastic'
let g:syntastic_check_on_open=1

" Auto Complete
" ============================================================================
Plugin 'Valloric/YouCompleteMe'

" Javascript
" =============================================================================
let javascript_fold = 1                    " javascript syntax folding


" Python
" =============================================================================
Plugin 'klen/python-mode'
Plugin 'mitsuhiko/vim-jinja'
Plugin 'saltstack/salt-vim'

let python_highlight_all = 1
let g:pylint_onwrite = 0
let g:netrw_list_hide = '.*\.pyc$'

" Turn off defaults
let g:pymode_lint = 0
let g:pymode_lint_write = 0
let g:pylint_onwrite = 0
let g:pytmode_lint_write = 0
let g:pymode_rope = 0
let g:pymode_run = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Syntax Highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" adds python path to vim path, so putting the cursor over an import and
" hitting 'gf' should jump to that module
" probably need to update this
if has("python")
python << EOF
import os
import sys
import vim
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF
endif


" Ruby
" =============================================================================
Plugin 'vim-ruby/vim-ruby'
let g:syntastic_ruby_checkers = ['rubocop', 'mri']

" Chef
" =============================================================================
Plugin 'tomtom/tlib_vim'
Plugin 'vadv/vim-chef'

" -----------------------------------------------------------------------------
" Utilities
" -----------------------------------------------------------------------------

" Snippets...
" =============================================================================
" TODO: get snippets working....

" NERDTree
" =============================================================================
Plugin 'scrooloose/nerdtree'
let g:NERDSpaceDelims = 1                  " put space after comment delimiter

" CtrlP
" =============================================================================
Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '<leader>t'
map <Leader>T :CtrlPBufTag<CR>

let g:ctrlp_use_caching = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_custom_ignore = {
    \ 'dir': 'eggs$\|\.git$\|env/lib$\|node_modules$',
\}


" Airline
" =============================================================================
Plugin 'bling/vim-airline'
let g:airline_theme = 'gotham'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#eclim#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tagbar#enabled = 1


" tmuxline
" =============================================================================
" fancy tmux
Plugin 'edkolev/tmuxline.vim'


" Tagbar
" =============================================================================
Plugin 'majutsushi/tagbar'
map ,t :TagbarToggle<CR>

" Ag
" =============================================================================
Plugin 'rking/ag.vim'
nmap <Leader>a :Ag!


" Vimwiki
" =============================================================================
Plugin 'vimwiki/vimwiki'
let g:vimwiki_list = [{'path': '~/.vimwiki/'}]


" Indent Guides
" =============================================================================
Plugin 'nathanaelkane/vim-indent-guides'
let g:indent_guides_auto_colors = 1
let g:indent_guides_guide_size = 1


" -----------------------------------------------------------------------------
" Key Bindings
" -----------------------------------------------------------------------------

" Delete trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" ^P toggles paste mode (from insert mode)
map <C-p> :set paste!<CR>:set paste?<CR>

" ctrl-h/ctrl-l for previous/next tab
map <C-h> gT
map <C-l> gt

" display the number of occurences of the word under the cursor
map <Leader>wc :%s///gn<CR>

" ^O for scrolling through completion options
imap <C-o> <C-p>

map <c-n> :cn<cr>

map ,n :tabnew<cr>

"For all files, start at last edited position
autocmd BufReadPost *
           \ if line("'\"") > 0 && line("'\"") <= line("$") |
           \ exe "normal g`\"" |
           \ endif

call vundle#end()
